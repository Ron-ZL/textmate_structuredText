<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>

	<key>fileTypes</key>
	<array>
		<string>exp</string>
	</array>
	
	<key>foldingStartMarker</key>
	<string>\b(?i:(if|while|for|case|do|repeat|var|var_input|var_in_out|var_output|var_global|type|struct|program|action|function|function_block))\b</string>
	
	<key>foldingStopMarker</key>
	<string>\b(?i:(end_if|end_while|end_for|end_case|end_repeat|end_type|end_struct|end_var|end_program|end_action|end_function|end_function_block))\b</string>
		
	<key>name</key>
	<string>Structured Text</string>
	
	<key>patterns</key>
	<array>
	
		<!-- control keywords -->	
		<dict>
			<key>match</key>
			<string>\b(?i:(if|then|else|elsif|end_if|for|to|by|do|end_for|while|end_while|repeat|until|end_repeat|case|end_case))\b</string>
			<key>name</key>
			<string>keyword.control.st</string>
		</dict>
		
		<!-- operators -->	
		<dict>
			<key>match</key>
			<string>\b(?i:(not|and|or|xor|mod))\b</string>
			<key>name</key>
			<string>keyword.operator.st</string>
		</dict>
		
		<!-- converters -->	
		<dict>
			<key>match</key>
			<string>\b(?i:((bool|byte|sint|word|int|uint|dword|dint|udint|real|lword|lint|lreal|string|time|date|dt|date|tod)_to_.*))\b</string>
			<key>name</key>
			<string>keyword.other.st</string>
		</dict>
		
		<!-- common function -->	
		<dict>
			<key>match</key>
			<string>\b(?i:(shl|shr|rol|ror|log))\b</string>
			<key>name</key>
			<string>keyword.other.st</string>
		</dict>
			
		<!-- var/type/struct -->		
		<dict>
			<key>match</key>
			<string>\b(?i:(var|var_input|var_in_out|var_output|var_global|end_var|type|end_type|struct|end_struct))\b</string>
			<key>name</key>
			<string>entity.name.section</string>
		</dict>
		
		<!-- modifier -->	
		<dict>
			<key>match</key>
			<string>\b(?i:(constant|persistent|retain))\b</string>
			<key>name</key>
			<string>storage.modifier.st</string>
		</dict>

		<!-- function/function_block/program -->
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.st</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.st</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?i:(function|function_block|program|action))\b\s+(\w+(\.\w+)?)</string>
			<key>name</key>
			<string>meta.function.st</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.st</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.st</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?i:(end_program|end_action|end_function|end_function_block))</string>
			<key>name</key>
			<string>meta.function.st</string>
		</dict>
		
		<!-- type -->		
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.st</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?i:(bool|byte|sint|word|int|uint|dword|dint|udint|real|lword|lint|lreal|string|array|of|pointer to))\b</string>
			<key>name</key>
			<string>meta.function.st</string>
		</dict>
		
		<!-- date/time constant -->		
		<dict>
			<key>match</key>
			<string>\b((?i:(t|time|tod|dt|d|date_and_time|date|time_of_day))#)(\w|-|:)*\b</string>
			<key>name</key>
			<string>string.interpolated.st</string>
		</dict>
		
		<!-- time/date -->		
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.st</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?i:(time|date|dt|date|date_and_time|tod|time_of_day))\b</string>
			<key>name</key>
			<string>meta.function.st</string>
		</dict>
		
		<!-- numeric constant -->
		<dict>
			<key>match</key>
			<string>\b((2#(0|1)*)|(16#[0-9a-fA-F]*)|(((-)?[0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b</string>
			<key>name</key>
			<string>constant.numeric.st</string>
		</dict>
		
		<!-- true/false -->
		<dict>
			<key>match</key>
			<string>\b(?i:(true|false))\b</string>
			<key>name</key>
			<string>constant.language.st</string>
		</dict>
		
		
		<!-- comment block -->
		<dict>
			<key>begin</key>
			<string>\(\*</string>
			<key>end</key>
			<string>\*\)</string>
			<key>name</key>
			<string>comment.block.st</string>
		</dict>
		
		<!-- pragma -->		
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>end</key>
			<string>}</string>
			<key>name</key>
			<string>comment.block.preprocessor.st</string>
		</dict>
		
		<!-- invalid -->		
		<dict>
			<key>match</key>
			<string>\b(?i:(ä|ö|ü|ß|\?|\"))\b</string>
			<key>name</key>
			<string>invalid.illegal.st</string>
		</dict>
		
		<!-- strings -->		
		<dict>
			<key>applyEndPatternLast</key>
			<integer>1</integer>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.st</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.st</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.st</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>''</string>
					<key>name</key>
					<string>constant.character.escape.apostrophe.st</string>
				</dict>
			</array>
		</dict>
		
	</array>
	
	<key>scopeName</key>
	<string>source.structuredtext</string>
</dict>
</plist>